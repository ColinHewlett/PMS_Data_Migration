/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinicpmsdatamigrator.view;

import clinicpmsdatamigrator.ClinicPMSDataMigrator;
import clinicpmsdatamigrator.controller.MigrationDescriptor;
import clinicpmsdatamigrator.controller.ViewController;
import clinicpmsdatamigrator.store.Store;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JSeparator;

/**
 *
 * @author colin
 */
public class AppointmentMigratorView extends View {
    private ActionListener myController = null;
    private MigrationDescriptor migrationDescriptor = null;
    private InternalFrameAdapter internalFrameAdapter = null;
    private Store.Storage database = null;

    /**
     * Creates new form AppointmentMigratorView
     */
    public AppointmentMigratorView(ActionListener myController) {
        this.myController = myController;
        setMigrationDescriptor(new MigrationDescriptor());
        initComponents();
        
    }
    
    public MigrationDescriptor getMigrationDescriptor(){
        return this.migrationDescriptor;
    }
    private void setMigrationDescriptor(MigrationDescriptor value){
        this.migrationDescriptor = value;
    }
    private Store.Storage getDatabase(){
        return database;
    }
    private void setDatabase(Store.Storage value){
        database = value;
    }
    
    public void initialiseView(){
        addInternalFrameClosingListener();
        setDatabase(Store.getStorageType());
        if (getDatabase().equals(Store.Storage.UNDEFINED_DATABASE))
            super.setTitle("Undefined database appointments migration");
        else{
            switch (getDatabase()){
                case ACCESS -> super.setTitle("Access database appointments migration"); 
                case POSTGRES -> super.setTitle("PostgreSQL database appointments migration");
                case SQL_EXPRESS -> super.setTitle("SQL Express database appointments migration");
            }
        }
        super.repaint();
    }
    
    @Override
    public void addInternalFrameClosingListener(){
        /**
         * Establish an InternalFrameListener for when the view is closed 
         */
        
        internalFrameAdapter = new InternalFrameAdapter(){
            @Override  
            public void internalFrameClosing(InternalFrameEvent e) {
                ActionEvent actionEvent = new ActionEvent(
                        AppointmentMigratorView.this,ActionEvent.ACTION_PERFORMED,
                        ViewController.AppointmentViewControllerActionEvent.APPOINTMENTS_VIEW_CLOSED.toString());
                getMyController().actionPerformed(actionEvent);
            }
        };
        this.addInternalFrameListener(internalFrameAdapter);
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent e){
        String propertyName = e.getPropertyName();
        /*
        if (propertyName.equals(ViewController.MigratorViewControllerPropertyChangeEventEvent.APPOINTMENTS_FOR_DAY_RECEIVED.toString())){
            setEntityDescriptor((EntityDescriptor)e.getNewValue());
            initialiseViewFromEDCollection();
        */  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        fchFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        txtSelectedAppointmentSourceFile = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSelectedTargetFile = new javax.swing.JTextField();
        txtSelectedPatientSourceFile = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuAction = new javax.swing.JMenu();
        mniSelectAppointmentCSVFile = new javax.swing.JCheckBoxMenuItem();
        mniSelectPatientCSVFile = new javax.swing.JCheckBoxMenuItem();
        mniSelectTargetDatabase = new javax.swing.JCheckBoxMenuItem();
        mniMigrateData = new javax.swing.JMenuItem();
        mniExitDataMigrator = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Selected files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        txtSelectedAppointmentSourceFile.setEditable(false);

        jLabel1.setText("Appointment source file");

        jLabel2.setText("Target database");

        txtSelectedTargetFile.setEditable(false);

        txtSelectedPatientSourceFile.setEditable(false);

        jLabel3.setText("Patient source file");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSelectedAppointmentSourceFile)
                    .addComponent(txtSelectedPatientSourceFile)
                    .addComponent(txtSelectedTargetFile, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addComponent(txtSelectedAppointmentSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(txtSelectedPatientSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(txtSelectedTargetFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        mnuAction.setText("Action");

        mniSelectAppointmentCSVFile.setSelected(true);
        mniSelectAppointmentCSVFile.setText("Select appointment CSV file");
        mniSelectAppointmentCSVFile.setState(false);
        mniSelectAppointmentCSVFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSelectAppointmentCSVFileActionPerformed(evt);
            }
        });
        mnuAction.add(mniSelectAppointmentCSVFile);

        mniSelectPatientCSVFile.setSelected(false);
        mniSelectPatientCSVFile.setText("Select patient CSV file");
        mniSelectPatientCSVFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSelectPatientCSVFileActionPerformed(evt);
            }
        });
        mnuAction.add(mniSelectPatientCSVFile);

        mniSelectTargetDatabase.setSelected(true);
        mniSelectTargetDatabase.setText("Select target database");
        mniSelectTargetDatabase.setState(false);
        mniSelectTargetDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSelectTargetDatabaseActionPerformed(evt);
            }
        });
        mnuAction.add(mniSelectTargetDatabase);

        mnuAction.add(new JSeparator());
        mniMigrateData.setText("Migrate data from CSV to database");
        mniMigrateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniMigrateDataActionPerformed(evt);
            }
        });
        mnuAction.add(mniMigrateData);
        mnuAction.add(new JSeparator());

        mniExitDataMigrator.setText("Exit data migrator");
        mniExitDataMigrator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitDataMigratorActionPerformed(evt);
            }
        });
        mnuAction.add(mniExitDataMigrator);

        jMenuBar1.add(mnuAction);

        jMenu2.setText("Edit");

        jMenuItem1.setText("jMenuItem1");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fchFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fchFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniSelectAppointmentCSVFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSelectAppointmentCSVFileActionPerformed
        int result = this.fchFileChooser.showOpenDialog(new JFrame());
        if (result == fchFileChooser.APPROVE_OPTION) {
            File selectedFile = fchFileChooser.getSelectedFile();
            this.txtSelectedAppointmentSourceFile.setText(selectedFile.getPath());
            mniSelectAppointmentCSVFile.setState(true);
        }
        else mniSelectAppointmentCSVFile.setState(false);
    }//GEN-LAST:event_mniSelectAppointmentCSVFileActionPerformed

    private void mniSelectTargetDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSelectTargetDatabaseActionPerformed
        if (getDatabase().equals(Store.Storage.UNDEFINED_DATABASE)){
            JOptionPane.showMessageDialog(null, 
                "Database has not been defined; file selection aborted", 
                "Database error", 
                JOptionPane.WARNING_MESSAGE);
        }
        else{
            int result = this.fchFileChooser.showOpenDialog(new JFrame());
            if (result == fchFileChooser.APPROVE_OPTION) {
                File selectedFile = fchFileChooser.getSelectedFile();
                this.txtSelectedTargetFile.setText(selectedFile.getPath());
                mniSelectTargetDatabase.setState(true);
            }
            else mniSelectTargetDatabase.setState(false);
        }
    }//GEN-LAST:event_mniSelectTargetDatabaseActionPerformed

    private void mniMigrateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniMigrateDataActionPerformed
        if (this.mniSelectAppointmentCSVFile.getState() && this.mniSelectTargetDatabase.getState()){
            getMigrationDescriptor().getAppointment().setData(this.txtSelectedAppointmentSourceFile.getText());
            getMigrationDescriptor().getPatient().setData(this.txtSelectedPatientSourceFile.getText());
            getMigrationDescriptor().getTarget().setData(this.txtSelectedTargetFile.getText());
            ActionEvent actionEvent = new ActionEvent(this, 
                    ActionEvent.ACTION_PERFORMED,
                    ViewController.MigratorViewControllerActionEvent.APPOINTMENT_MIGRATOR_REQUEST.toString());
            this.getMyController().actionPerformed(actionEvent);
        }
        else{
            if (!this.mniSelectAppointmentCSVFile.getState())
                JOptionPane.showMessageDialog(null, 
                        "Source file has not been selected yet", 
                        "Error", 
                        JOptionPane.INFORMATION_MESSAGE);
            else if (!this.mniSelectTargetDatabase.getState())
                JOptionPane.showMessageDialog(null, 
                        "Target database has not been selected yet", 
                        "Error", 
                        JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_mniMigrateDataActionPerformed

    private void mniSelectPatientCSVFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSelectPatientCSVFileActionPerformed
        int result = this.fchFileChooser.showOpenDialog(new JFrame());
        if (result == fchFileChooser.APPROVE_OPTION) {
            File selectedFile = fchFileChooser.getSelectedFile();
            this.txtSelectedPatientSourceFile.setText(selectedFile.getPath());
            mniSelectPatientCSVFile.setState(true);
        }
        else mniSelectAppointmentCSVFile.setState(false);
    }//GEN-LAST:event_mniSelectPatientCSVFileActionPerformed

    private void mniExitDataMigratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitDataMigratorActionPerformed
        try{
            this.setClosed(true);
        }
        catch (PropertyVetoException e){
            
        }
    }//GEN-LAST:event_mniExitDataMigratorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fchFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem mniExitDataMigrator;
    private javax.swing.JMenuItem mniMigrateData;
    private javax.swing.JCheckBoxMenuItem mniSelectAppointmentCSVFile;
    private javax.swing.JCheckBoxMenuItem mniSelectPatientCSVFile;
    private javax.swing.JCheckBoxMenuItem mniSelectTargetDatabase;
    private javax.swing.JMenu mnuAction;
    private javax.swing.JTextField txtSelectedAppointmentSourceFile;
    private javax.swing.JTextField txtSelectedPatientSourceFile;
    private javax.swing.JTextField txtSelectedTargetFile;
    // End of variables declaration//GEN-END:variables

    private ActionListener getMyController(){
        return myController;
    }
    
    private void test(){
        try{
            this.setClosed(true);
        }
        catch (PropertyVetoException e){
            
        }
    }
}
